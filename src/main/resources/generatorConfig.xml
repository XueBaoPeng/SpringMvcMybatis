<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<!-- 配置Run As Maven build : Goals 参数 : mybatis-generator:generate -Dmybatis.generator.overwrite=true -->
<!-- 配置 tableName,使用 Run As Maven build 生成 dao model 层 -->

<generatorConfiguration>

    <!-- 配置文件路径 -->
    <!-- 另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用-->
    <properties url="${mybatis.generator.generatorConfig.properties}"/>

    <context id="DB2Tables" targetRuntime="MyBatis3">
        <!-- 这个插件给由MBG生成的Java模型对象增加了equals和hashCode方法 -->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />
        <!-- 这个插件给由MBG生成的Javas添加了java.io.Serializable标记接口。这个插件给实体类增加了serialVersionUID字段。 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin" />
        <!-- 该插件给Example类添加方法（实际上是给Criteria内部类）来支持不区分大小写的LIKE搜索 -->
        <!--<plugin type="org.mybatis.generator.plugins.CaseInsensitiveLikePlugin" />-->
        <!-- 该插件给实体类添加toString()方法。 -->
        <!--<plugin type="org.mybatis.generator.plugins.ToStringPlugin" />-->
        <commentGenerator>
            <!-- 生成的Java文件的编码 -->
            <property name="javaFileEncoding" value="UTF-8"/>
            <!-- 格式化java代码 -->
            <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
            <!-- 格式化XML代码 -->
            <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

            <!-- 设置为flase,生成注释包含时间时间戳 -->
            <property name="suppressDate" value="true" />
            <!-- 用来指定MBG生成的代码中是否包含任何注释
            	设置为false,运行多次插件,不会生成重复的内容
            	在pom.xml插件配置中,配置不重写文件,所以不需要插件生成的注释 -->
            <property name="suppressAllComments" value="true" />
        </commentGenerator>

        <!--数据库连接信息 -->
        <jdbcConnection driverClass="${jdbc.driver}" connectionURL="${jdbc.url}" userId="${jdbc.username}"
                        password="${jdbc.password}">
        </jdbcConnection>

        <!--
            targetProject:被假定为一个已存在的目录结构。 如果目录结构不存在MBG将会失败.
            targetPackage:将会转换为 targetProject 适当的子目录结构。 如果有必要，MBG会创建这些子目录。
            enableSubPackages:Java模型生成器应该使用子包。
           这意味着在这种情况下生成的模型对象将被放置在名为 test.model.db2admin 的包中（因为表在 DB2ADMIN schema中）。
            如果 enableSubPackages 属性设置为 false， 那么包名将会是 test.model。
           Java模型生成器也应该对字符串进行trim操作。
          这意味着任何字符串属性的setter方法将调用trim方法 - 如果您的数据库可能会在字符末尾返回空白符，这是非常有用的。
        -->

        <!--生成的entity 包路径 -->
        <javaModelGenerator targetPackage="${model.package}" targetProject="${target.project}">
            <property name="enableSubPackages" value="ture"/>
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!--生成xml mapper文件 路径 -->
        <sqlMapGenerator targetPackage="${xml.mapper.package}" targetProject="${target.project}">
            <property name="enableSubPackages" value="ture"/>
        </sqlMapGenerator>

        <!-- 生成的Dao接口 的包路径 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${dao.package}" targetProject="${target.project}">
            <property name="enableSubPackages" value="ture"/>
        </javaClientGenerator>

        <!--对应数据库表名 -->
        <!-- 配置表映射 -->
        <table tableName="courses" domainObjectName="Course">
            <property name="constructorBased" value="true" />
            <property name="ignoreQualifiersAtRuntime" value="true" />
        </table>
        <table tableName="students" domainObjectName="Student">
            <property name="constructorBased" value="true" />
            <property name="ignoreQualifiersAtRuntime" value="true" />
        </table>
        <table tableName="textbooks" domainObjectName="Textbook">
            <property name="constructorBased" value="true" />
            <property name="ignoreQualifiersAtRuntime" value="true" />
        </table>
        <table tableName="grades" domainObjectName="Grade">
            <property name="constructorBased" value="true" />
            <property name="ignoreQualifiersAtRuntime" value="true" />
        </table>
        <table tableName="student_courses" domainObjectName="StudentCourse">
            <property name="constructorBased" value="true" />
            <property name="ignoreQualifiersAtRuntime" value="true" />
        </table>
    </context>
</generatorConfiguration>